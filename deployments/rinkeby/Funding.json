{
  "address": "0x56dB15a47b153bC74a6EdcC971be2FCB347E76a7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Funding__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MIN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "funderToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "funderToExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x76be5a41740976c17cfb23f9e7446cd6c883ef2392c83dabb205431b2b04563b",
  "receipt": {
    "to": null,
    "from": "0xeeD362c36033bC45B3C6f97D64f43F86034D798C",
    "contractAddress": "0x56dB15a47b153bC74a6EdcC971be2FCB347E76a7",
    "transactionIndex": 7,
    "gasUsed": "951482",
    "logsBloom": "0x
    "blockHash": "0xf8a03d3faa4506e77bea900d652795b0f27082a6d0e80e391e36c3b77e49f215",
    "transactionHash": "0x76be5a41740976c17cfb23f9e7446cd6c883ef2392c83dabb205431b2b04563b",
    "logs": [],
    "blockNumber": 10915563,
    "cumulativeGasUsed": "2346095",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "da426f264db9367d1d6d9fc11c7c5442",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Funding__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MIN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funderToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funderToExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Anas Latique\",\"details\":\"This contract uses Price Feeds from the Chainlink Oracle to calculate the price of ETH to determine the limit.\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"Gets the current price of ETH in USD from a Chainlink Oracle and compares it with the limit.\"},\"withdraw()\":{\"details\":\"Checks if the contract owner, is the transaction sender using a function modifier.\"}},\"title\":\"A contract to allow users to fund it\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Payable function and it's used to fund the contract.\"},\"withdraw()\":{\"notice\":\"Withdraws the funds from the contract to the transaction (current function caller) sender.\"}},\"notice\":\"You can use this contract to collect funds from users and withdraw those funds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Funding.sol\":\"Funding\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/EthPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary EthPrice {\\n  function getPrice(AggregatorV3Interface priceFeed) view internal returns (uint256) {\\n    (\\n      /*uint80 roundID*/,\\n      int price,\\n      /*uint startedAt*/,\\n      /*uint timeStamp*/,\\n      /*uint80 answeredInRound*/\\n    ) = priceFeed.latestRoundData();\\n    return uint256(price * 1e10);\\n  }\\n\\n  function getEthInUsd (uint256 ethValue, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    return (ethPrice * ethValue) / 1e18;\\n  }\\n}\",\"keccak256\":\"0xd5f95e6da10cdec24ec23bb615c80ddf04e4d1ca0678e7d2ca8661021b92312e\",\"license\":\"MIT\"},\"contracts/Funding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./EthPrice.sol\\\";\\n\\nerror Funding__NotOwner();\\n\\n/// @title A contract to allow users to fund it\\n/// @author Anas Latique\\n/// @notice You can use this contract to collect funds from users and withdraw those funds.\\n/// @dev This contract uses Price Feeds from the Chainlink Oracle to calculate the price of ETH to determine the limit.\\ncontract Funding {\\n  // using a library on the uint256 type\\n  using EthPrice for uint256;\\n\\n  address immutable public fundingOwner;\\n\\n  uint256 constant public MIN_USD = 10 * 1e18;\\n\\n  address[] public funders;\\n  mapping (address => uint256) public funderToAmount;\\n  mapping (address => bool) public funderToExists;\\n\\n  // the pricefeed\\n  AggregatorV3Interface public priceFeed;\\n\\n  modifier ownerOnly () {\\n    if(fundingOwner != msg.sender) {\\n        revert Funding__NotOwner();\\n    }\\n    _;\\n  }\\n\\n  constructor(address feedAddress) {\\n    priceFeed = AggregatorV3Interface(feedAddress);\\n    fundingOwner = msg.sender;\\n  }\\n\\n  /// @notice Payable function and it's used to fund the contract.\\n  /// @dev Gets the current price of ETH in USD from a Chainlink Oracle and compares it with the limit.\\n  function fund() public payable {\\n    uint256 usdAmount = msg.value.getEthInUsd(priceFeed);\\n    require(usdAmount >= MIN_USD, \\\"Not enough funds sent. Send more than $50 you cheap bastard.\\\");\\n\\n    funderToAmount[msg.sender] += msg.value;\\n    if(!funderToExists[msg.sender]) {\\n      funders.push(msg.sender);\\n      funderToExists[msg.sender] = true;\\n    }\\n  }\\n\\n  /// @notice Withdraws the funds from the contract to the transaction (current function caller) sender.\\n  /// @dev Checks if the contract owner, is the transaction sender using a function modifier.\\n  function withdraw() public ownerOnly {\\n    // for loop in solidity, kinda same as JS\\n    address funder;\\n    address[] memory fundersCopy = funders;\\n\\n    for(uint256 i = 0; i < fundersCopy.length; i++) {\\n        funder = fundersCopy[i];\\n        funderToAmount[funder] = 0;\\n    }\\n\\n    // reset the array\\n    funders = new address[](0);\\n\\n    // actually withdraw the amount from this contract to the original caller.\\n    // payable address is address that we can send Eth to.\\n    bool withdrawalResp = payable(msg.sender).send(address(this).balance);\\n    require(withdrawalResp, \\\"The withdrawal did not go through.\\\");\\n  }\\n}\",\"keccak256\":\"0x161be11f35fb77955b0f84ca3eceb718c30ea9802801864f4220985fa4ba8b6f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011473803806200114783398181016040528101906200003791906200011d565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051610fd562000172600039600081816101fe01526104580152610fd56000f3fe60806040526004361061007b5760003560e01c8063741bef1a1161004e578063741bef1a1461012a578063b60d428814610155578063dc0d3dff1461015f578063f994d3411461019c5761007b565b8063213dbea2146100805780633ccfd60b146100ab5780633d65ab73146100c25780634407e1e8146100ed575b600080fd5b34801561008c57600080fd5b506100956101d9565b6040516100a29190610888565b60405180910390f35b3480156100b757600080fd5b506100c06101e5565b005b3480156100ce57600080fd5b506100d7610456565b6040516100e491906108e4565b60405180910390f35b3480156100f957600080fd5b50610114600480360381019061010f9190610930565b61047a565b6040516101219190610888565b60405180910390f35b34801561013657600080fd5b5061013f610492565b60405161014c91906109bc565b60405180910390f35b61015d6104b8565b005b34801561016b57600080fd5b5061018660048036038101906101819190610a03565b6106a2565b60405161019391906108e4565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190610930565b6106e1565b6040516101d09190610a4b565b60405180910390f35b678ac7230489e8000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461026a576040517fb6c483f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008054806020026020016040519081016040528092919081815260200182805480156102ef57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102a5575b5050505050905060005b81518110156103775781818151811061031557610314610a66565b5b602002602001015192506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061036f90610ac4565b9150506102f9565b50600067ffffffffffffffff81111561039357610392610b0c565b5b6040519080825280602002602001820160405280156103c15781602001602082028036833780820191505090505b50600090805190602001906103d79291906107c8565b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044890610bbe565b60405180910390fd5b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006104ef600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461070190919063ffffffff16565b9050678ac7230489e8000081101561053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390610c50565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461058b9190610c70565b92505081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661069f576000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50565b600081815481106106b257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b60008061070d83610737565b9050670de0b6b3a764000084826107249190610cc6565b61072e9190610d4f565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190610e0d565b5050509150506402540be400816107c09190610e88565b915050919050565b828054828255906000526020600020908101928215610841579160200282015b828111156108405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107e8565b5b50905061084e9190610852565b5090565b5b8082111561086b576000816000905550600101610853565b5090565b6000819050919050565b6108828161086f565b82525050565b600060208201905061089d6000830184610879565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ce826108a3565b9050919050565b6108de816108c3565b82525050565b60006020820190506108f960008301846108d5565b92915050565b600080fd5b61090d816108c3565b811461091857600080fd5b50565b60008135905061092a81610904565b92915050565b600060208284031215610946576109456108ff565b5b60006109548482850161091b565b91505092915050565b6000819050919050565b600061098261097d610978846108a3565b61095d565b6108a3565b9050919050565b600061099482610967565b9050919050565b60006109a682610989565b9050919050565b6109b68161099b565b82525050565b60006020820190506109d160008301846109ad565b92915050565b6109e08161086f565b81146109eb57600080fd5b50565b6000813590506109fd816109d7565b92915050565b600060208284031215610a1957610a186108ff565b5b6000610a27848285016109ee565b91505092915050565b60008115159050919050565b610a4581610a30565b82525050565b6000602082019050610a606000830184610a3c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610acf8261086f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b0157610b00610a95565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082825260208201905092915050565b7f546865207769746864726177616c20646964206e6f7420676f207468726f756760008201527f682e000000000000000000000000000000000000000000000000000000000000602082015250565b6000610ba8602283610b3b565b9150610bb382610b4c565b604082019050919050565b60006020820190508181036000830152610bd781610b9b565b9050919050565b7f4e6f7420656e6f7567682066756e64732073656e742e2053656e64206d6f726560008201527f207468616e2024353020796f7520636865617020626173746172642e00000000602082015250565b6000610c3a603c83610b3b565b9150610c4582610bde565b604082019050919050565b60006020820190508181036000830152610c6981610c2d565b9050919050565b6000610c7b8261086f565b9150610c868361086f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cbb57610cba610a95565b5b828201905092915050565b6000610cd18261086f565b9150610cdc8361086f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d1557610d14610a95565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d5a8261086f565b9150610d658361086f565b925082610d7557610d74610d20565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d9f81610d80565b8114610daa57600080fd5b50565b600081519050610dbc81610d96565b92915050565b6000819050919050565b610dd581610dc2565b8114610de057600080fd5b50565b600081519050610df281610dcc565b92915050565b600081519050610e07816109d7565b92915050565b600080600080600060a08688031215610e2957610e286108ff565b5b6000610e3788828901610dad565b9550506020610e4888828901610de3565b9450506040610e5988828901610df8565b9350506060610e6a88828901610df8565b9250506080610e7b88828901610dad565b9150509295509295909350565b6000610e9382610dc2565b9150610e9e83610dc2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610edd57610edc610a95565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f1a57610f19610a95565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f5757610f56610a95565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f9457610f93610a95565b5b82820290509291505056fea2646970667358221220dc8b507d6414995acff79fe768e028c893946ab883ea66a1d6d06694c7c5b40964736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063741bef1a1161004e578063741bef1a1461012a578063b60d428814610155578063dc0d3dff1461015f578063f994d3411461019c5761007b565b8063213dbea2146100805780633ccfd60b146100ab5780633d65ab73146100c25780634407e1e8146100ed575b600080fd5b34801561008c57600080fd5b506100956101d9565b6040516100a29190610888565b60405180910390f35b3480156100b757600080fd5b506100c06101e5565b005b3480156100ce57600080fd5b506100d7610456565b6040516100e491906108e4565b60405180910390f35b3480156100f957600080fd5b50610114600480360381019061010f9190610930565b61047a565b6040516101219190610888565b60405180910390f35b34801561013657600080fd5b5061013f610492565b60405161014c91906109bc565b60405180910390f35b61015d6104b8565b005b34801561016b57600080fd5b5061018660048036038101906101819190610a03565b6106a2565b60405161019391906108e4565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190610930565b6106e1565b6040516101d09190610a4b565b60405180910390f35b678ac7230489e8000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461026a576040517fb6c483f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008054806020026020016040519081016040528092919081815260200182805480156102ef57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102a5575b5050505050905060005b81518110156103775781818151811061031557610314610a66565b5b602002602001015192506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061036f90610ac4565b9150506102f9565b50600067ffffffffffffffff81111561039357610392610b0c565b5b6040519080825280602002602001820160405280156103c15781602001602082028036833780820191505090505b50600090805190602001906103d79291906107c8565b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044890610bbe565b60405180910390fd5b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006104ef600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461070190919063ffffffff16565b9050678ac7230489e8000081101561053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390610c50565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461058b9190610c70565b92505081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661069f576000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50565b600081815481106106b257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b60008061070d83610737565b9050670de0b6b3a764000084826107249190610cc6565b61072e9190610d4f565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a99190610e0d565b5050509150506402540be400816107c09190610e88565b915050919050565b828054828255906000526020600020908101928215610841579160200282015b828111156108405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107e8565b5b50905061084e9190610852565b5090565b5b8082111561086b576000816000905550600101610853565b5090565b6000819050919050565b6108828161086f565b82525050565b600060208201905061089d6000830184610879565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ce826108a3565b9050919050565b6108de816108c3565b82525050565b60006020820190506108f960008301846108d5565b92915050565b600080fd5b61090d816108c3565b811461091857600080fd5b50565b60008135905061092a81610904565b92915050565b600060208284031215610946576109456108ff565b5b60006109548482850161091b565b91505092915050565b6000819050919050565b600061098261097d610978846108a3565b61095d565b6108a3565b9050919050565b600061099482610967565b9050919050565b60006109a682610989565b9050919050565b6109b68161099b565b82525050565b60006020820190506109d160008301846109ad565b92915050565b6109e08161086f565b81146109eb57600080fd5b50565b6000813590506109fd816109d7565b92915050565b600060208284031215610a1957610a186108ff565b5b6000610a27848285016109ee565b91505092915050565b60008115159050919050565b610a4581610a30565b82525050565b6000602082019050610a606000830184610a3c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610acf8261086f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b0157610b00610a95565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082825260208201905092915050565b7f546865207769746864726177616c20646964206e6f7420676f207468726f756760008201527f682e000000000000000000000000000000000000000000000000000000000000602082015250565b6000610ba8602283610b3b565b9150610bb382610b4c565b604082019050919050565b60006020820190508181036000830152610bd781610b9b565b9050919050565b7f4e6f7420656e6f7567682066756e64732073656e742e2053656e64206d6f726560008201527f207468616e2024353020796f7520636865617020626173746172642e00000000602082015250565b6000610c3a603c83610b3b565b9150610c4582610bde565b604082019050919050565b60006020820190508181036000830152610c6981610c2d565b9050919050565b6000610c7b8261086f565b9150610c868361086f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cbb57610cba610a95565b5b828201905092915050565b6000610cd18261086f565b9150610cdc8361086f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d1557610d14610a95565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d5a8261086f565b9150610d658361086f565b925082610d7557610d74610d20565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d9f81610d80565b8114610daa57600080fd5b50565b600081519050610dbc81610d96565b92915050565b6000819050919050565b610dd581610dc2565b8114610de057600080fd5b50565b600081519050610df281610dcc565b92915050565b600081519050610e07816109d7565b92915050565b600080600080600060a08688031215610e2957610e286108ff565b5b6000610e3788828901610dad565b9550506020610e4888828901610de3565b9450506040610e5988828901610df8565b9350506060610e6a88828901610df8565b9250506080610e7b88828901610dad565b9150509295509295909350565b6000610e9382610dc2565b9150610e9e83610dc2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610edd57610edc610a95565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f1a57610f19610a95565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f5757610f56610a95565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f9457610f93610a95565b5b82820290509291505056fea2646970667358221220dc8b507d6414995acff79fe768e028c893946ab883ea66a1d6d06694c7c5b40964736f6c634300080e0033",
  "devdoc": {
    "author": "Anas Latique",
    "details": "This contract uses Price Feeds from the Chainlink Oracle to calculate the price of ETH to determine the limit.",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "Gets the current price of ETH in USD from a Chainlink Oracle and compares it with the limit."
      },
      "withdraw()": {
        "details": "Checks if the contract owner, is the transaction sender using a function modifier."
      }
    },
    "title": "A contract to allow users to fund it",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Payable function and it's used to fund the contract."
      },
      "withdraw()": {
        "notice": "Withdraws the funds from the contract to the transaction (current function caller) sender."
      }
    },
    "notice": "You can use this contract to collect funds from users and withdraw those funds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114,
        "contract": "contracts/Funding.sol:Funding",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 118,
        "contract": "contracts/Funding.sol:Funding",
        "label": "funderToAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 122,
        "contract": "contracts/Funding.sol:Funding",
        "label": "funderToExists",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 125,
        "contract": "contracts/Funding.sol:Funding",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}