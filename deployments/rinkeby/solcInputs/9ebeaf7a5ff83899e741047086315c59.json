{
  "language": "Solidity",
  "sources": {
    "contracts/EthPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary EthPrice {\n  function getPrice(AggregatorV3Interface priceFeed) view internal returns (uint256) {\n    (\n      /*uint80 roundID*/,\n      int price,\n      /*uint startedAt*/,\n      /*uint timeStamp*/,\n      /*uint80 answeredInRound*/\n    ) = priceFeed.latestRoundData();\n    return uint256(price * 1e10);\n  }\n\n  function getEthInUsd (uint256 ethValue, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(priceFeed);\n    return (ethPrice * ethValue) / 1e18;\n  }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/Funding.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport \"./EthPrice.sol\";\n\nerror NotOwner();\n\n// funding campaign\ncontract Funding {\n  // using a library on the uint256 type\n  using EthPrice for uint256;\n\n  address immutable public fundingOwner;\n\n  // make the function payable\n  uint256 constant public MIN_USD = 10 * 1e18;\n\n  address[] public funders;\n  mapping (address => uint256) public funderToAmount;\n  mapping (address => bool) public funderToExists;\n\n  // the pricefeed\n  AggregatorV3Interface priceFeed;\n\n  constructor(address feedAddress) {\n    priceFeed = AggregatorV3Interface(feedAddress);\n    fundingOwner = msg.sender;\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n\n  function fund() public payable {\n    uint256 usdAmount = msg.value.getEthInUsd(priceFeed);\n    require(usdAmount >= MIN_USD, \"Not enough funds sent. Send more than $50 you cheap bastard.\");\n\n    funderToAmount[msg.sender] += msg.value;\n    if(!funderToExists[msg.sender]) {\n      funders.push(msg.sender);\n      funderToExists[msg.sender] = true;\n    }\n  }\n\n  function withdraw() public ownerOnly {\n    // for loop in solidity, kinda same as JS\n    for(uint256 i = 0; i < funders.length; i++) {\n        address funder = funders[i];\n        funderToAmount[funder] = 0;\n    }\n\n    // reset the array\n    funders = new address[](0);\n\n    // actually withdraw the amount from this contract to the original caller.\n    // payable address is address that we can send Eth to.\n    bool withdrawalResp = payable(msg.sender).send(address(this).balance);\n    require(withdrawalResp, \"The withdrawal did not go through.\");\n  }\n\n  modifier ownerOnly () {\n    // require((fundingOwner == msg.sender), \"You are not the owner.\");\n    if(fundingOwner != msg.sender) {\n        revert NotOwner();\n    }\n    _;\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}